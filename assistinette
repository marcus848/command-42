#!/bin/bash

# Arquivo para armazenar os projetos
MAIN_DIR="$HOME/assistinette"
PROJECTS_FILE="$MAIN_DIR/42_projects"

print_colored() {
	case $2 in
		"greenb") echo -e "\033[1;32m$1\033[0m" ;; # Green bold
		"redb") echo -e "\033[1;31m$1\033[0m" ;; # Red bold
		"yellowb") echo -e "\033[1;33m$1\033[0m" ;; # Yellow bold
		"yellow") echo -e "\033[0;33m$1\033[0m" ;; # Yellow 
		"blueb") echo -e "\033[1;34m$1\033[0m" ;; # Blue bold
		*) echo "$1" ;; # Sem cor
	esac
}

loading_animation() {
	frames="/ - \\ |"
	while :; do
		for frame in $frames; do
			printf "\r%s" "$frame"  # Imprime o frame
			sleep 0.1               # Pausa para o efeito
		done
	done
}

get_project_path() {
	local project_name=$1
	local project_path

	project_path=$(grep "^$project_name=" "$PROJECTS_FILE" | cut -d'=' -f2)

	echo $project_path
}

make_makefile() {
	local project_path=$1
	local use_libft=$2

	if [ "$use_libft" = "libft" ]; then
		cp "$MAIN_DIR/Makefile-libft" "$project_path/Makefile"
	else
		cp "$MAIN_DIR/Makefile" "$project_path/Makefile"
	fi
}

make_gitignore() {
	project_path=$1
	use_libft=$2

	if [ "$use_libft" = "libft" ]; then
		cp "$MAIN_DIR/gitignore-libft" "$project_path/.gitignore"
	else
		cp "$MAIN_DIR/gitignore" "$project_path/.gitignore"
	fi
}

# Função para criar um novo projeto
create_project() {
	local project_name=$1
	local project_path="$2/$project_name"
	local use_libft=$3
	 
	# Verificar se o caminho do projeto foi fornecido
	if [ -z "$project_path" ]; then
		echo "Erro: Caminho do projeto não fornecido."
		exit 1
	fi

	# Criar estrutura de pastas padrão
	mkdir -p "$project_path"
	mkdir -p "$project_path/src" "$project_path/include" "$project_path/tests" "$project_path/bin" "$project_path/apps" "$project_path/obj"

	# Verificar se a criação das pastas foi bem-sucedida
	if [ $? -ne 0 ]; then
		echo "Erro ao criar a estrutura de pastas em $project_path."
		exit 1
	fi

	# Se usar libft, copiar para o projeto
	if [ "$use_libft" = "libft" ]; then
		libft_path="$HOME/42/libft"
		mkdir -p "$project_path/libft"
		cp -r "$libft_path/src" "$project_path/libft/src"
		cp -r "$libft_path/include" "$project_path/libft/include"
		cp "$libft_path/Makefile" "$project_path/libft/Makefile"

		if [ $? -ne 0 ]; then
			echo "Erro ao copiar a libft para o projeto."
			exit 1
		fi
	fi
	
	make_makefile "$project_path" "$use_libft"
	make_gitignore "$project_path" "$use_libft"

	cd "$project_path"
	
	# Salvar caminho do projeto
	echo "$project_name=$(pwd)" >> "$PROJECTS_FILE"
	print_colored "Projeto $project_name criado em $project_path." "blueb"
}

# Função para iniciar o dia de trabalho
start_day() {
	local project_name=$1
	local project_path
	
	# Buscar o caminho do projeto pelo nome
	project_path=$(get_project_path $project_name)

	if [ -z "$project_path" ]; then
		echo "Projeto não encontrado: $project_name"
		exit 1
	fi

	# Abrir tmux, navegar até a pasta e iniciar nvim
	tmux new-session -d -s assist$project_name -n main
	tmux send-keys -t assist$project_name:main "cd $project_path" C-m
	tmux send-keys -t assist$project_name:main "nvim" C-m
	tmux split-window -t assist$project_name:main -h
	tmux send-keys -t assist$project_name:main "cd $project_path" C-m
	tmux attach-session -t assist$project_name
}
#
run_norm() {
	local details=$1
	local temp_file=$(mktemp)

	if [ "$details" = "detailed" ]; then
		norm -D
	else
		norm > "$temp_file" 2>&1
	fi
	
	cat "$temp_file"
	rm -f "$temp_file"
}

run_norm_with_animation() {
	local temp_file=$(mktemp)

	if ! norm > "$temp_file" 2>&1; then
		echo "Erro ao executar norminette."
		exit 1
	fi &
	NORM_PID=$!
	
	loading_animation &
	LOADING_PID=$!

	wait $NORM_PID
	NORM_EXIT_CODE=$?

	kill $LOADING_PID 2>/dev/null
	wait $LOADING_PID 2>/dev/null

	if [ $NORM_EXIT_CODE -eq 0 ]; then
		if [ -s "$temp_file" ]; then
			printf "\r"
			cat "$temp_file"
		else
			echo "SUCCESS"
		fi
	else
		echo "erro"
	fi

	rm -f "$temp_file"	
}

update_libft() {
	local project_name=$1
	local libft_source="$HOME/42/libft"

	local project_path=$(get_project_path $project_name)

	if [ -z "$project_path" ]; then
		echo "Projeto não encontrado: $project_name"
		exit 1
	fi

	local libft_destination="$project_path/libft"

	if [ ! -d "$libft_source" ]; then
		echo "libft não existe: $libft_source"
		exit 1
	fi
	
	if [ ! -d "$libft_destination" ]; then
		echo "Add libft ao projeto $project"
	else
		echo "Atualizando libft do projeto $project"
	fi

	rm -rf "$libft_destination"
	mkdir -p "$libft_destination"
	cp -r "$libft_source/src" "$libft_destination/src"
	cp -r "$libft_source/include" "$libft_destination/include"
	cp "$libft_source/Makefile" "$libft_destination/Makefile"

	print_colored "Libft Atualizada adicionada" "greenb"
}

add_projects() {
	local project_name=$1
	local project_path=$2
	local path_final

	if grep -q "^$project_name=" "$PROJECTS_FILE"; then
		echo "Project '$project_name' ja existe, deseja edita-lo? (S/n)"
		read response
	fi

	if [ "$response" == "n" ]; then
		print_colored "Acão cancelada!" "greenb"
		exit 0
	fi

	cd "$project_path"
	echo "$project_name=$(pwd)" >> "$PROJECTS_FILE"
	print_colored "Projeto '$project_name' adicionado com sucesso." "greenb"
}

edit_projects() {
	local project_name=$1
	local new_project_path=$2

	if grep -q "^$project_name=" "$PROJECTS_FILE"; then
		cd "$new_project_path"
		sed -i "s|^$project_name=.*|$project_name=$(pwd)|" "$PROJECTS_FILE"
		print_colored "Projeto '$project_name' editado com sucesso." "greenb"
		exit 0
	fi
	echo "Projeto '$project_name' não encontrado, deseja adiciona-lo? (S/n)"
	read response
	if [ "$response" == "n" ]; then
		print_colored "Acão cancelada!" "greenb"
		exit 0
	fi
	cd "$new_project_path"
	echo "$project_name=$(pwd)" >> "$PROJECTS_FILE"
	print_colored "Projeto '$project_name' adicionado com sucesso." "greenb"
}

del_projects() {
	local project_name=$1

	echo "Deseja excluir o $project_name? (S/n)"
	read response

	if [ "$response" == "n" ]; then
		print_colored "Acão cancelada!" "greenb"
		exit 0
	fi
	
	if grep -q "^$project_name=" "$PROJECTS_FILE"; then
		sed -i "/^$project_name=/d" "$PROJECTS_FILE"
		print_colored "Projeto '$project_name' removido com sucesso." "greenb"
	else
		echo "Projeto '$project_name' não encontrado"
	fi

}

view_projects() {
	print_colored "Projetos listados em $PROJECTS_FILE:" "greenb"
	cat "$PROJECTS_FILE"
}

go_project_path() {
	local project_name=$1
	local project_path

	project_path=$(get_project_path $project_name)

	if [ -z $project_path ]; then
		echo "$HOME"
	else
		echo "$project_path"
	fi
}

# Função de ajuda
show_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  -c <name> <path> [libft]     Create a new project (use 'libft' to copy libft)"
    echo "  -s <name>                    Start the workday for the specified project"
    echo "  -n                           Run a simple norminette check"
    echo "  -N                           Run a detailed norminette check"
    echo "  -h                           Show this help message"
    echo "  -u <name>                    Update the libft for the specified project"
    echo "  -a <name> <path>             Add a new project"
    echo "  -e <name> <new_path>         Edit the path for an existing project"
    echo "  -d <name>                    Delete a project"
    echo "  -v                           View all projects"
    echo -e "  -g <name>                    \033[3;33mGet the path to the project (use as: cd \$(assistinette -g project_name))\033[0m"
}

# Verificar argumentos
if [ $# -eq 0 ]; then
	show_help
	exit 0
fi

# Processar argumentos
while getopts "c:s:nNh:u:a:e:d:vg" opt; do
	case $opt in
		c)
			project_name=$OPTARG
			use_libft="$3"
			project_path="$4"
			create_project "$project_name" "$use_libft" "$project_path"
			shift 3
			;;
		s)
			start_day "$OPTARG"
			shift 1
			;;
		n)
			print_colored "Norminette (Simple): " "blueb"
			printf "\r"
			run_norm_with_animation
			exit 0
			;;
		N)
			print_colored "Norminette (Detailed):" "blueb"
			run_norm "detailed"
			exit 0
			;;
		u)
			update_libft "$OPTARG"
			shift 1
			;;
		a)
			add_projects "$OPTARG" "${!OPTIND}"
			shift 2
			;;
		e)
			project_name="$OPTARG"
			new_project_path="${!OPTIND}"
			edit_projects "$project_name" "$new_project_path"
			shift 2
			;;
		d)
			del_projects "$OPTARG"
			shift 1
			;;
		v)
			view_projects
			exit 0
			;;
		g)
			go_project_path "$2"
			exit 0
			;;
		h)
			show_help
			exit 0
			;;
		*)
			show_help
			exit 1
			;;
	esac
done
