#!/bin/bash

# Arquivo para armazenar os projetos
MAIN_DIR="$HOME/assistinette"
PROJECTS_FILE="$MAIN_DIR/42_projects"

print_colored() {
	case $2 in
		"greenb") echo -e "\033[1;32m$1\033[0m" ;; # Green bold
		"redb") echo -e "\033[1;31m$1\033[0m" ;; # Red bold
		"yellowb") echo -e "\033[1;33m$1\033[0m" ;; # Yellow bold
		"yellow") echo -e "\033[0;33m$1\033[0m" ;; # Yellow 
		"blueb") echo -e "\033[1;34m$1\033[0m" ;; # Blue bold
		*) echo "$1" ;; # Sem cor
	esac
}

loading_animation() {
	frames="/ - \\ |"
	while :; do
		for frame in $frames; do
			printf "\r%s" "$frame"  # Imprime o frame
			sleep 0.1               # Pausa para o efeito
		done
	done
}

get_project_path() {
	local project_name=$1
	local project_path

	project_path=$(grep "^$project_name=" "$PROJECTS_FILE" | cut -d'=' -f2)

	echo $project_path
}

get_project_name() {
	local project_name
	
	project_name=$(grep "=$(pwd)$" "$PROJECTS_FILE" | cut -d '=' -f 1)

	echo $project_name
}

check_file_exist() {
	local project="$1"
	
	if grep -q "^$project=" "$PROJECTS_FILE"; then
		return 0
	else
		return 1
	fi
}

make_makefile() {
	local project_path=$1
	local use_libft=$2

	if [ "$use_libft" = "libft" ]; then
		cp "$MAIN_DIR/Makefile-libft" "$project_path/Makefile"
	else
		cp "$MAIN_DIR/Makefile" "$project_path/Makefile"
	fi
}

make_gitignore() {
	project_path=$1
	use_libft=$2

	if [ "$use_libft" = "libft" ]; then
		cp "$MAIN_DIR/gitignore-libft" "$project_path/.gitignore"
	else
		cp "$MAIN_DIR/gitignore" "$project_path/.gitignore"
	fi
}

# Função para criar um novo projeto
create_project() {
	local project_name=$1
	local project_path="$2/$project_name"
	local use_libft=$3
	 
	# Verificar se o caminho do projeto foi fornecido
	if [ -z "$project_path" ]; then
		echo "Erro: Caminho do projeto não fornecido."
		exit 1
	fi

	# Criar estrutura de pastas padrão
	mkdir -p "$project_path"
	mkdir -p "$project_path/src" "$project_path/include" "$project_path/tests" "$project_path/bin" "$project_path/apps" "$project_path/obj"

	# Verificar se a criação das pastas foi bem-sucedida
	if [ $? -ne 0 ]; then
		echo "Erro ao criar a estrutura de pastas em $project_path."
		exit 1
	fi

	# Se usar libft, copiar para o projeto
	if [ "$use_libft" = "libft" ]; then
		libft_path="$HOME/42/libft"
		mkdir -p "$project_path/libft"
		cp -r "$libft_path/src" "$project_path/libft/src"
		cp -r "$libft_path/include" "$project_path/libft/include"
		cp "$libft_path/Makefile" "$project_path/libft/Makefile"

		if [ $? -ne 0 ]; then
			echo "Erro ao copiar a libft para o projeto."
			exit 1
		fi
	fi
	
	make_makefile "$project_path" "$use_libft"
	make_gitignore "$project_path" "$use_libft"

	cd "$project_path"
	
	# Salvar caminho do projeto
	echo "$project_name=$(pwd)" >> "$PROJECTS_FILE"
	print_colored "Projeto $project_name criado em $project_path." "blueb"
}

# Função para iniciar o dia de trabalho
start_day() {
	local project_name=$1
	local project_path
	
	# Buscar o caminho do projeto pelo nome
	project_path=$(get_project_path $project_name)

	if [ -z "$project_path" ]; then
		echo "Projeto não encontrado: $project_name"
		exit 1
	fi

	# Abrir tmux, navegar até a pasta e iniciar nvim
	tmux new-session -d -s assist$project_name -n main
	tmux send-keys -t assist$project_name:main "cd $project_path" C-m
	tmux send-keys -t assist$project_name:main "nvim" C-m
	tmux split-window -t assist$project_name:main -h
	tmux send-keys -t assist$project_name:main "cd $project_path" C-m
	tmux attach-session -t assist$project_name
}
#
run_norm() {
	local details=$1
	shift 2
	local temp_file=$(mktemp)
	local items

	if [ $# -gt 0 ]; then
		items="$@"
	fi
	# exit 1
	if [ "$details" = "detailed" ]; then
		norm -D $items
	else
		norm $items > "$temp_file" 2>&1
	fi
	
	cat "$temp_file"
	rm -f "$temp_file"
}

run_norm_with_animation() {
	local temp_file=$(mktemp)
	
	norm "$@" > "$temp_file" 2>&1 &
	NORM_PID=$!
	
	loading_animation &
	LOADING_PID=$!

	wait $NORM_PID
	NORM_EXIT_CODE=$?

	kill $LOADING_PID 2>/dev/null
	wait $LOADING_PID 2>/dev/null

	printf "\r"

	if [ $NORM_EXIT_CODE -ne 0 ]; then
		if [ -s "$temp_file" ]; then
			cat "$temp_file"
		else
			echo "Erro ao executar norm com os argumentos $@"
		fi
	else
		if [ -s "$temp_file" ]; then
			cat "$temp_file"
		else
			echo "SUCCESS"
		fi
	fi

	rm -f "$temp_file"	
}

update_libft() {
	local project_name=$1
	local libft_source="$HOME/42/libft"

	local project_path=$(get_project_path $project_name)
	
	if [ -z "$project_path" ]; then
		echo "Projeto não encontrado: $project_name"
		exit 1
	fi

	local libft_destination="$project_path/libft"

	if [ ! -d "$libft_source" ]; then
		echo "libft não existe: $libft_source"
		exit 1
	fi
	
	if [ ! -d "$libft_destination" ]; then
		echo "Add libft ao projeto $project"
	else
		echo "Atualizando libft do projeto $project"
	fi

	rm -rf "$libft_destination"
	mkdir -p "$libft_destination"
	cp -r "$libft_source/src" "$libft_destination/src"
	cp -r "$libft_source/include" "$libft_destination/include"
	cp "$libft_source/Makefile" "$libft_destination/Makefile"

	print_colored "Libft Atualizada adicionada" "greenb"
}

add_projects() {
	local project_name=$1
	local project_path=$2
	local path_final

	if grep -q "^$project_name=" "$PROJECTS_FILE"; then
		echo "Project '$project_name' ja existe, deseja edita-lo? (S/n)"
		read response
	fi

	if [ "$response" == "n" ]; then
		print_colored "Acão cancelada!" "greenb"
		exit 0
	fi

	cd "$project_path"
	echo "$project_name=$(pwd)" >> "$PROJECTS_FILE"
	print_colored "Projeto '$project_name' adicionado com sucesso." "greenb"
}

edit_projects() {
	local project_name=$1
	local new_project_path=$2

	if grep -q "^$project_name=" "$PROJECTS_FILE"; then
		cd "$new_project_path"
		sed -i "s|^$project_name=.*|$project_name=$(pwd)|" "$PROJECTS_FILE"
		print_colored "Projeto '$project_name' editado com sucesso." "greenb"
		exit 0
	fi
	echo "Projeto '$project_name' não encontrado, deseja adiciona-lo? (S/n)"
	read response
	if [ "$response" == "n" ]; then
		print_colored "Acão cancelada!" "greenb"
		exit 0
	fi
	cd "$new_project_path"
	echo "$project_name=$(pwd)" >> "$PROJECTS_FILE"
	print_colored "Projeto '$project_name' adicionado com sucesso." "greenb"
}

del_projects() {
	local project_name=$1

	echo "Deseja excluir o $project_name? (S/n)"
	read response

	if [ "$response" == "n" ]; then
		print_colored "Acão cancelada!" "greenb"
		exit 0
	fi
	
	if grep -q "^$project_name=" "$PROJECTS_FILE"; then
		sed -i "/^$project_name=/d" "$PROJECTS_FILE"
		print_colored "Projeto '$project_name' removido com sucesso." "greenb"
	else
		echo "Projeto '$project_name' não encontrado"
	fi

}

view_projects() {
	print_colored "Projetos listados em $PROJECTS_FILE:" "greenb"
	cat "$PROJECTS_FILE"
}

go_project_path() {
	local project_name=$1
	local project_path

	project_path=$(get_project_path $project_name)

	if [ -z $project_path ]; then
		echo "$HOME"
	else
		echo "$project_path"
	fi
}

verify_tag_notes() {
	local tag=$1
	local valid_tags=("#important" "#idea" "#question" "#note")
	for valid_tag in "${valid_tags[@]}"; do
		if [ "$tag" = "$valid_tag" ]; then
			return 0
		fi
	done
	print_colored "Invalid tag. Use #important, #idea, #question or #note." "redb"
	return 1
}

print_header_notes_tag()
{
	case $1 in
		"#important")
			print_colored "=== IMPORTANT ===" "redb"
			;; 
		"#idea")
			print_colored "=== IDEA ===" "greenb"
			;; 
		"#question")
			print_colored "=== QUESTION ===" "yellowb"
			;; 
		"#note")
			print_colored "=== NOTE ===" "blueb"
			;; 
		*)
			print_colored "=== NOTE ===" "blueb"
			;; 
	esac
	return 0
}

view_notes_by_tag()
{
	local project_name=$1
	local tag=$2
	local file_tag
	local notes_dir="$MAIN_DIR/notes/$project_name"
	local have_note=0

	if [ ! -d "$notes_dir" ]; then
		print_colored "No notes found for project '$project_name'." "yellowb"
		return 1
	fi

	for file in "$notes_dir"/*; do
		file_tag=$(head -n 1 "$file")
		if [ $tag = $file_tag ]; then
			print_header_notes_tag $tag
			tail -n +2 "$file"
			echo 
			have_note=1
		fi
	done
	if [ $have_note -eq 0 ]; then
		print_colored "Don't found notes '$tag' for project '$project_name'." "redb"
	fi
}

delete_notes_by_tag()
{
	local project_name=$1
	local tag=$2
	local file_tag
	local notes_dir="$MAIN_DIR/notes/$project_name"
	
	if [ ! -d "$notes_dir" ]; then
		print_colored "No notes found for project '$project_name'." "yellowb"
		return 1
	fi

	for file in "$notes_dir"/*; do
		file_tag=$(head -n 1 "$file")
		if [ $tag = $file_tag ]; then
			rm $file
		fi
	done
	print_colored "Notes '$tag' removed from '$project_name'." "greenb"
}

menage_notes() {
	local action=$1
	local project_name=$2
	local note_name=$3
	local tag=$4
	local note_content

	if [ "$action" = "help" ]; then
		show_help_notes
		return 0
	fi
	if ! check_file_exist "$project_name"; then
		project_name=$(get_project_name)
		if ! check_file_exist "$project_name"; then
			print_colored "Project not found" "redb"
			exit 0
		fi
		note_name=$2
		tag=$3
	fi


	local notes_dir="$MAIN_DIR/notes/$project_name"
	local note_file="$notes_dir/$note_name"
	
	mkdir -p "$notes_dir"

	case $action in
		"add")
			if [ -z $note_name ]; then
				print_colored "Note name dont received" "redb"
				exit 1
			fi
			if [[ "$tag" =~ ^# ]]; then
				shift 3
				note_content="$@"
			else
				tag="#note"
				shift 2
				note_content="$@"
			fi
			if ! verify_tag_notes "$tag"; then
				exit 1
			fi
			if [ -f "$note_file" ];then
				echo "NOTE $note_name already exist in $project_name"
				echo "What you want to do?"
				echo "S -- Substitude"
				echo "A -- Add in note (below)"
				echo "C -- Cancel"
				read -r response
				case "$response" in
				[Ss])
					echo "$tag" > "$note_file"
					if [ -n "$note_content" ]; then
						echo "$note_content" >> "$note_file"
					else
						echo "" >> "$note_file"
						${EDITOR:-vi} "$note_file"
					fi
					print_colored "$note_name updated" "greenb"
					;;
				[Aa])
					echo "$note_content" >> "$note_file"
					print_colored "$note_name updated" "greenb"
					;;
				[Cc]|*)
					print_colored "Action canceled" "greenb"
					;;
				esac
			else
				echo "$tag" > "$note_file"
				if [ -n "$note_content" ]; then
					echo "$note_content" >> "$note_file"
				else
					echo "" >> "$note_file"
					${EDITOR:-vi} "$note_file"
				fi
				print_colored "Note '$note_name' add in the project '$project_name'." "greenb"
			fi
			;;
		"view")
			shift 1
			for file in $@; do
				note_name=$file
				note_file="$notes_dir/$note_name"
				if [ -z "$(ls -A $notes_dir)" ]; then
					print_colored "No notes found for project $project_name" "redb"
				elif [ -f "$note_file" ]; then
					tag=$(head -n 1 "$note_file")
					print_header_notes_tag $tag
					tail -n +2 "$note_file"
					echo
				elif [[ $file =~ ^# ]]; then
					if verify_tag_notes "$file"; then
					view_notes_by_tag $project_name $file
					fi
				else
					print_colored "Note '$note_name' not found in project '$project_name'." "redb"
				fi
			done
			;;
		"edit")
			if [ -f "$note_file" ]; then
				${EDITOR:-vi} "$note_file"
			else
				print_colored "Note '$note_name' not found from '$project_name'." "redb"
			fi
			;;
		"delete")
			shift 1
			echo "Are you sure that you want to continue? (S/n)"
			read -r response
			case $response in
			[Ss])

				if [ "$1" = "--all" ]; then
					if [ -z "$(ls -A $notes_dir)" ] ; then
						print_colored "Project $project_name haven't notes" "yellowb"
					else
						rm "$notes_dir"/*
						print_colored "All notes deleted for project '$project_name'" "greenb"
					fi
				else
					for file in $@; do
						note_name=$file
						note_file="$notes_dir/$note_name"
						if [ -f "$note_file" ]; then
							rm "$note_file"
							print_colored "Note '$note_name' removed from '$project_name'." "greenb"
						elif [[ $file =~ ^# ]]; then
							delete_notes_by_tag $project_name $file
						else
							print_colored "Note '$note_name' not found from '$project_name'." "redb"
						fi
					done
				fi
				;;
			[Nn]|*)
				print_colored "Action canceled" "greenb"
				;;
			esac
			;;
		"list")
			if [ -d "$notes_dir" ]; then
				local count_notes=$(ls "$notes_dir" | wc -l)
				if [ "$count_notes" != "0" ]; then
					for note in $(ls "$notes_dir"); do
						local note_path="$notes_dir/$note"
						local tag=$(head -n 1 "$note_path")
						local mod_date=$(stat -c "%y" "$note_path" | cut -d'.' -f1)
						case $tag in
							"#important")
								print_colored "[$mod_date] $note (IMPORTANT)" "redb"
								;;
							"#idea")
								print_colored "[$mod_date] $note (IDEA)" "greenb"
								;;
							"#question")
								print_colored "[$mod_date] $note (QUESTION)" "yellowb"
								;;
							"#note")
								print_colored "[$mod_date] $note (NOTE)" "blueb"
								;;
							*)
								print_colored "[$mod_date] $note (NOTE)" "blueb"
								;;
						esac
					done
					# ls "$notes_dir"

				else
					print_colored "Notes not found for the project '$project_name'." "yellowb"
				fi
			fi
			;;
		*)
			print_colored "Invalid action. Use add, view, edit, delete ou list." "redb"
	esac
}

show_help_notes() {
    echo -e "\033[1;37mUsage: \033[1;32massistinette --notes [action] [project_name] [note_name] [tag] [content]\033[0m"
    echo
    echo -e "\033[1;37mActions:\033[0m"
    echo -e "  \033[1;32madd\033[0m <project_name> <note_name> [tag] [content]   Add a new note to the project"
    echo -e "                                                   (tag: \033[1;31m#important\033[0m, \033[1;32m#idea\033[0m, \033[1;33m#question\033[0m, \033[1;34m#note\033[0m)"
    echo -e "  \033[1;32mview\033[0m <project_name> <note_name/tag>              View a specific note or all notes with a tag"
    echo -e "  \033[1;32medit\033[0m <project_name> <note_name>                  Edit a specific note"
    echo -e "  \033[1;32mdelete\033[0m <project_name> <note_name/tag>            Delete a specific note or all notes with a tag"
    echo -e "  \033[1;32mlist\033[0m <project_name>                              List all notes in a project"
    echo -e "  \033[1;32mhelp\033[0m                                             Show this help message"
    echo
    echo -e "\033[1;37mExamples:\033[0m"
    echo -e "  \033[1;32massistinette --notes add my_project my_note \033[1;31m\\#important\033[0m \"This is an important note\""
    echo -e "  \033[1;32massistinette --notes view my_project my_note\033[0m"
    echo -e "  \033[1;32massistinette --notes view my_project \033[1;31m\\#important\033[0m"
    echo -e "  \033[1;32massistinette --notes edit my_project my_note\033[0m"
    echo -e "  \033[1;32massistinette --notes delete my_project my_note\033[0m"
    echo -e "  \033[1;32massistinette --notes delete my_project \033[1;31m\\#important\033[0m"
    echo -e "  \033[1;32massistinette --notes list my_project\033[0m"
    echo -e "  \033[1;32massistinette --notes help\033[0m"
    echo
    echo -e "\033[1;37mNotes:\033[0m"
    echo -e "  \033[1;33m- If you are inside the project directory, you can omit the <project_name>.\033[0m"
    echo -e "  - If no tag is provided when adding a note, \033[1;34m#note\033[0m is used as the default."
    echo -e "  - Use tags to categorize notes:"
    echo -e "      \033[1;31m#important\033[0m  (red)"
    echo -e "      \033[1;32m#idea\033[0m       (green)"
    echo -e "      \033[1;33m#question\033[0m   (yellow)"
    echo -e "      \033[1;34m#note\033[0m       (blue)"
    echo -e "  - To delete all notes in a project, use: \033[1;32massistinette --notes delete <project_name> --all\033[0m"
    echo -e "  - For \033[1;32mview\033[0m and \033[1;32mdelete\033[0m, you can pass multiple items (notes and tags) in any order."
    echo -e "    Example:"
    echo -e "      \033[1;32massistinette --notes view my_project my_note1 \033[1;31m\\#important\033[0m my_note2\033[0m"
    echo -e "      \033[1;32massistinette --notes delete my_project my_note1 \033[1;31m\\#important\033[0m my_note2\033[0m"
    echo -e "  - If no content is provided when adding a note, the default editor (\033[1;34mvi\033[0m) will open to allow you to write the note."
    echo -e "  - The \033[1;32medit\033[0m action also opens the default editor (\033[1;34mvi\033[0m) to modify the note."
    echo -e "  - Tags starting with \033[1;31m#\033[0m must be escaped with a backslash (\\) or enclosed in quotes."
    echo -e "    Example:"
    echo -e "      \033[1;32massistinette --notes add my_project my_note \033[1;31m\\#important\033[0m \"This is an important note\""
    echo -e "      \033[1;32massistinette --notes add my_project my_note \033[1;31m\"#important\"\033[0m \"This is an important note\""
}

# Função de ajuda
show_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  -c <name> <path> [libft]     Create a new project (use 'libft' to copy libft)"
    echo "  -s <name>                    Start the workday for the specified project"
    echo "  -n [files/dirs]              Run a simple norminette check"
    echo "  -N [files/dirs]              Run a detailed norminette check"
    echo "  -h                           Show this help message"
    echo "  -u <name>                    Update the libft for the specified project"
    echo "  -a <name> <path>             Add a new project"
    echo "  -e <name> <new_path>         Edit the path for an existing project"
    echo "  -d <name>                    Delete a project"
    echo "  -v                           View all projects"
    echo -e "  -g <name>                    \033[3;33mGet the path to the project (use as: cd \$(assistinette -g project_name))\033[0m"
    echo "  --notes                      Manage notes for projects (use '--notes help' for more details)"
}

# Verificar argumentos
if [ $# -eq 0 ]; then
	show_help
	exit 0
fi

# Processar argumentos
while [[ $# -gt 0 ]]; do
	case $1 in
		-c)
			shift 1
			create_project "$1" "$2" "$3"
			if [ "$3" == "libft" ]; then
				shift 3
			else
				shift 2
			fi
			exit 1
			;;
		-s)
			shift 1
			start_day "$1"
			shift 1
			;;
		-n)
			print_colored "Norminette (Simple): " "blueb"
			printf "\r"
			shift
			run_norm_with_animation $@
			exit 0
			;;
		-N)
			print_colored "Norminette (Detailed):" "blueb"
			run_norm "detailed" $@
			exit 0
			;;
		-u)
			shift 1
			update_libft "$1"
			shift 1
			;;
		-a)
			shift 1
			add_projects "$1" "$2"
			shift 2
			;;
		-e)
			shift 1
			edit_projects "$1" "$2"
			shift 2
			;;
		-d)
			shift 1
			del_projects "$1"
			shift 1
			;;
		-v)
			shift 1
			view_projects
			exit 0
			;;
		-g)
			shift 1
			go_project_path "$1"
			shift 1
			;;
		-h)
			show_help
			exit 0
			;;
		--notes)
			shift 1
			menage_notes "$@"
			exit 0
			;;
		*)
			show_help
			exit 1
			;;
	esac
done
